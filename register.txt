<?php

namespace App\Http\Controllers\Auth;

use App\FileUpload;
use App\Product;
use App\SubBroker;
use App\Address;
use App\BankMaster;
use App\Introducer;
use App\Nominee;
use App\Http\Controllers\Controller;
use App\Util;
use Dotenv\Exception\ValidationException;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Foundation\Auth\RegistersUsers;
use Validator;
use DB;



class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;


    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        return view('auth.register');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    public function validator(array $data)
    {
        $validator = Validator::make($data, [
            'name' => 'required|string|max:180',
            'identity' => 'required|in:individual,company',
            'introducername' => 'string|max:100|nullable',
            'introducercode' => 'string|max:80|nullable',
            'pradress' => 'required|string|max:180',
            'permadress' => 'required|string|max:180',
            'dob' => 'required|date',
            'age' =>'required|integer',
            'mobno' => 'required|max:10',
            'homephno' => 'nullable',
            'faxno' => 'nullable',
            'email' => 'required|string|email|max:180|unique:sub_broker_master',
            'password' => 'required|string|min:8|confirmed',
            'qualification' => 'required|string',
            'proffqualification' => 'nullable|string',
            'amfino' => 'required|in:yes,no',
            'amfi_file' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'irdano' => 'required|in:yes,no',
            'otherqualification' => 'nullable|string',
            'occupation' => 'required|in:service,business,housewife,retired,other',
            'experience' => 'required|integer',
            'product' => 'required|in:fixeddeposit,mutualfund,rbibonds,lifeinsurance,generalinsurance,educationalproduct,poscheme',
            'pan_no' => 'required|string|unique:sub_broker_master',
            'aadharno' => 'required|max:12',
            'bankname' => 'required|string',
            'bankbranchname' => 'required|string',
            'accountno' => 'required|string',
            'branchcode' => 'required|string',
            'ifsc' => 'required|string',
            'micr' => 'required|string',
            'rtgs' => 'required|string',
            'accounttype' => 'required|in:savings,current,nre,nro',
            'nomineename' => 'required|string',
            'nomineerelation' => 'required|string',
        ])->validate();


    }
    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\User
     */
    protected function create(Request $request)
    {
        DB::beginTransaction();


            $subbroker = new SubBroker;

            $subbroker->name = $request->input('name');
            $subbroker->identity = $request->input('associatetype') == 'yes' ? 1 : 0;
            $subbroker->dob = Util::mysqlDateTimeConverter($request->input('dob'));
            $subbroker->age = $request->input('age');
            $subbroker->phone_no = $request->input('mobno');
            $subbroker->email = $request->input('email');
            $subbroker->home_no = $request->input('homephno');
            $subbroker->fax_no = $request->input('faxno');
            $subbroker->password = $request->input('password');
            $subbroker->education = $request->input('qualification');
            $subbroker->proff_qualification = $request->input('proffqualification');
            $subbroker->amfi_no = $request->input('amfino') == 'yes' ? 1 : 0;
            $subbroker->irda_no = $request->input('irdano') == 'yes' ? 1 : 0;
            $subbroker->other_qualification = $request->input('other_qualification');
            $subbroker->occupation = $request->input('occupation');
            $subbroker->exp_year = $request->input('experience');
            $subbroker->pan_no = $request->input('panno');
            $subbroker->aadhar_no = $request->input('aadharno');

            /*$sub_broker_input = [
                'name' => $request["name"],
                'identity' => $request['associatetype'] == 'yes' ? 1 : 0,
                'dob' => Util::mysqlDateTimeConverter($request["dob"]),
                'age' => $request["age"],
                'phone_no' => $request["mobno"],
                'email' => $request["email"],
                'home_no' => $request["homephno"],
                'fax_no' => $request["faxno"],
                'password' => bcrypt($request["password"]),
                'education' => $request["qualification"],
                'proff_qualification' => $request["proffqualification"],
                'amfi_no' => $request["amfino"] == 'yes' ? 1 : 0,
                'irda_no' => $request["irdano"] == 'yes' ? 1 : 0,
                'other_qualification' => $request["other_qualification"],
                'occupation' => $request["occupation"] ? 1 : 0,
                'exp_year' => $request["experience"],
                'pan_no' => $request["panno"],
                'aadhar_no' => $request["aadharno"],
            ];*/

            $subBroker = SubBroker::create($subbroker);

            $bank_input = [
                'sub_broker_id' => $subBroker->id,
                'bank_name' => $request["bankname"],
                'branch_name' => $request["bankbranchname"],
                'account_no' => $request["accountno"],
                'branch_code' => $request["branchcode"],
                'ifsc' => $request["ifsc"],
                'micr' => $request["micr"],
                'branch_rtgs_no' => $request["rtgs"],
                'acc_type' => $request["accounttype"] ? 1 : 0,
            ];

            //$bank = BankMaster::create($bank_input);

            $nominee_input = [
                'sub_broker_id' => $subBroker->id,
                'nominee_name' => $request["nomineename"],
                'nominee_relationship' => $request["nomineerelation"],
            ];

            //$nominee = Nominee::create($nominee_input);

            $address_input = [
                'sub_broker_id' => $subBroker->id,
                'present_address' => $request["pradress"],
                'permanent_address' => $request["permadress"],
            ];

            //$address = Address::create($address_input);

            $introducer_input = [
                'sub_broker_id' => $subBroker->id,
                'introducer_name' => $request["introducername"],
                'introducer_code' => $request["introducercode"],
            ];

            //$introducer = Introducer::create($introducer_input);

            $product_input = [
                'sub_broker_id' => $subBroker->id,
                'product_name' => $request["product"] ? 1 : 0,
            ];

            //$product = Product::create($product_input);

            $imageName = $request->amfi_file->getClientOriginalName();
            $request->amfi_file->move(public_path('upload'),$imageName);

            $upload = new FileUpload;
            $upload->amfi_file = $imageName;
            $upload->sub_broker_id = $subBroker->id;
            dd(amfi_file);
            $file = FileUpload::create($upload);

            /*$uploadedFile = $input["amfi_file"];
            $imageName = $uploadedFile->getClientOriginalName();
            $uploadedFile->move(public_path('upload'),$imageName);

            $upload = new FileUpload;
            $upload->amfi_file = $imageName;
            $upload->sub_broker_id = $subBroker->id;
            $uploaded = FileUpload::create($upload);*/

            /*$fileupload = new FileUpload;
            if ($input->hasfile('arnattachment'))
            {
                $name = $fileupload->getClientOriginalName();
                $fileupload->move(public_path('upload'),$name);

            }
            $fileupload->amfi_file = json_encode($name);
            $fileupload->sub_broker_id = $subBroker->id;
            $fileupload->save();*/

            DB::commit();
            return $subBroker;

    }

    /*public function store(Request $request)
    {

            $validator = $this->validate($request, [

                ]
            );

            if ($validator->fails()) {
                return redirect('auth.register')
                    ->withErrors($validator)
                    ->withInput();
            }


        $subBroker = new SubBroker;
        $bankDetails = new BankMaster;
        $nominee = new Nominee;
        $address = new Address;
        $introducer = new Introducer;

        $introducer->introducer_name = $request->input('introducername');
        $introducer->introducer_code = $request->input('introducercode');

        $introducer->save();

        dd($introducer);
        /*$address_input = [
            'present_address' => $input["pradress"],
            'permanent_address' => $input["permadress"],
        ];

        $address = Address::create($address_input);

        $brokercompany->b_company_id = $request->input('company_id');
        $brokercompany->b_company_name = $request->input('company_name');
        $brokercompany->b_avg_feedback_day = $request->input('feedback_day');
        $brokercompany->b_company_email = $request->input('company_email');
        $brokercompany->b_company_address = $request->input('company_address');
        $brokercompany->b_company_pin = $request->input('company_pin');
        $brokercompany->b_company_city = $request->input('company_city');
        $brokercompany->b_company_state = $request->input('company_state');
        $brokercompany->b_company_country = $request->input('company_country');
        $brokercompany->b_company_GSTIN = $request->input('company_gstinno');

        if($brokercompany->save())
        {
            return redirect()->route('brokercompany.index');
        }
    }*/


    /*public function register(Request $request)
    {
        $validator = $this->validator($request->all());
        event(new Registered($subbroker = $this->create($request->all())));
        return $this->registered($request, $subbroker)
            ?: redirect($this->redirectPath());
    }*/

    public function showRegistrationForm()
    {
        return view("auth.register");
    }
}
